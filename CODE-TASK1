TASK 1 : TITANIC SURVIVAL PREDICTION
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import csv
train_path ="/content/train.csv"
test_path = "/content/test.csv"
train_data = pd.read_csv(train_path)
test_data = pd.read_csv(train_path)
train_data.head()
train_data.shape
train_data.info()
train_data.describe()
train_data.isnull().sum()
# cabin has a lot of null values both in test and train data

train_data.drop('Cabin', axis = 1, inplace = True)
test_data.drop('Cabin', axis = 1, inplace = True)
train_data.shape
train_data.Age.mean()
train_data.Age.median()
test_data.Age.mean()
test_data.Age.median()
( 29.7 + 28 + 30.3 + 27 ) / 4
train_data['Age'].replace(np.nan, 28.7, inplace = True)
test_data['Age'].replace(np.nan, 28.7, inplace = True)
train_data.isnull().sum()
train_data.Embarked.unique()
test_data.isnull().sum()
test_data.Fare.mean()
emb = train_data.Embarked.dropna().mode()[0]
train_data['Embarked'] = train_data['Embarked'].fillna(emb)
test_data['Fare'].replace(np.nan, 35.6271, inplace = True)
train_data.isnull().sum()
test_data.isnull().sum()
sns.countplot(x = 'Survived', data = train_data)
plt.show()
sns.countplot(x = 'Survived', hue = 'Sex', data = train_data)
plt.show()
ws = train_data.loc[train_data.Sex == 'female']['Survived']
wsr = sum(ws) / len(ws) * 100
print('women survivor rate: ', wsr)
ms = train_data.loc[train_data.Sex == 'male']['Survived']
msr = sum(ms) / len(ms) * 100
print('men survivor rate: ', msr)
sns.countplot(x = 'Survived', hue = 'Pclass', data = train_data)
plt.show()
c1 = train_data.loc[train_data.Pclass == 1]['Survived']
c1r = sum(c1) / len(c1) * 100
print('Passenger class 1 survivor rate: ', c1r)
c2 = train_data.loc[train_data.Pclass == 2]['Survived']
c2r = sum(c2) / len(c2) * 100
print('Passenger class 2 survivor rate: ', c2r)
c3 = train_data.loc[train_data.Pclass == 3]['Survived']
c3r = sum(c3) / len(c3) * 100
print('Passenger class 3 survivor rate: ', c3r)
sns.countplot(x = 'Survived', hue = 'SibSp', data = train_data)
plt.show()
sns.countplot(x = 'Survived', hue = 'Parch', data = train_data)
plt.show()
sns.countplot(x = 'Survived', hue = 'Embarked', data = train_data)
plt.show()
sns.violinplot(x = 'Survived', y = 'Age', data = train_data)
plt.show()
train_data['Sex'] = train_data['Sex'].map({'female': 1, 'male':0}).astype(int)
test_data['Sex'] = test_data['Sex'].map({'female': 1, 'male':0}).astype(int)
emb_dummy_train = pd.get_dummies(train_data['Embarked'])
train_data = pd.concat([train_data, emb_dummy_train], axis = 1)

emb_dummy_test = pd.get_dummies(test_data['Embarked'])
test_data = pd.concat([test_data, emb_dummy_test], axis = 1)
train_data.head()
train_data.drop({'Name','Ticket','Fare','Embarked'}, axis = 1, inplace = True)
test_data.drop({'Name','Ticket','Fare','Embarked'}, axis = 1, inplace = True)
train_data.head()
test_data.head()
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
train_data.iloc[:, 4:5] = sc.fit_transform(train_data.iloc[:, 4:5])
test_data.iloc[:, 3:4] = sc.fit_transform(test_data.iloc[:, 3:4])
train_data.head()
test_data.head()
x_train = train_data.drop(['PassengerId', 'Survived'], axis = 1).values
y_train = train_data['Survived'].values

from sklearn.model_selection import train_test_split
x_train_train, x_train_test, y_train_train, y_train_test = train_test_split(x_train, y_train, test_size = 0.25, random_state = 19)

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(x_train_train, y_train_train)
y_predlr = lr.predict(x_train_test)
from sklearn.metrics import accuracy_score, confusion_matrix

acclr = accuracy_score(y_train_test, y_predlr)
print(acclr)

cmlr = confusion_matrix(y_train_test, y_predlr)
print(cmlr)
from sklearn.tree import DecisionTreeClassifier
dtc = DecisionTreeClassifier(random_state = 7)
dtc.fit(x_train_train, y_train_train)
y_preddtc = dtc.predict(x_train_test)
accdtc = accuracy_score(y_train_test, y_preddtc)
print(accdtc)

cmdtc = confusion_matrix(y_train_test, y_preddtc)
print(cmdtc)
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators = 10, random_state = 7)
rfc.fit(x_train_train, y_train_train)
y_predrfc = rfc.predict(x_train_test)
accrfc = accuracy_score(y_train_test, y_predrfc)
print(accrfc)

cmrfc = confusion_matrix(y_train_test, y_predrfc)
print(cmrfc)